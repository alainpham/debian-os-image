#!/bin/bash

# script for pipewire connection

# comma separated list of sinks
speakers=$1

mic=$2

echo "hookup cspeaker to physical speakers"

id=$(pw-link -lI | grep "|<-.*cspeakers.*" | awk '{print $1}')
for i in $id; do
    pw-link -d $i
done

channels=$(pw-link -i | grep $speakers | grep -E "playback" | wc -l)

if [ $channels -eq 2 ]; then
    pw-link cspeakers:monitor_FL ${speakers}:playback_AUX0
    pw-link cspeakers:monitor_FR ${speakers}:playback_AUX1
fi

if [ $channels -eq 1 ]; then
    pw-link cspeakers:monitor_FL ${speakers}:playback_AUX0
    pw-link cspeakers:monitor_FR ${speakers}:playback_AUX0
fi

echo "connect from-desktop to cspeakers and to-caller-sink"
id=$(pw-link -lI | grep "|<-.*from-desktop.*" | awk '{print $1}')
for i in $id; do
    pw-link -d $i
done
pw-link from-desktop:monitor_FL cspeakers:playback_FL
pw-link from-desktop:monitor_FR cspeakers:playback_FR
pw-link from-desktop:monitor_FL to-caller-sink:playback_AUX0
pw-link from-desktop:monitor_FR to-caller-sink:playback_AUX1

echo "connect from-caller to cspeakers"
id=$(pw-link -lI | grep "|<-.*from-caller.*" | awk '{print $1}')
for i in $id; do
    pw-link -d $i
done
pw-link from-caller:monitor_FL cspeakers:playback_FL
pw-link from-caller:monitor_FR cspeakers:playback_FR


echo "hookup to physical mic"

echo "disconnect all virtual mics"
id=$(pw-link -lI | grep "|.*mic0.-processed" | awk '{print $1}')
for i in $id; do
    pw-link -d $i
done

echo "connect virtual mic to-caller-sink"

pw-link mic01-processed:capture_MONO to-caller-sink:playback_AUX0
pw-link mic01-processed:capture_MONO to-caller-sink:playback_AUX1
pw-link mic02-processed:capture_MONO to-caller-sink:playback_AUX0
pw-link mic02-processed:capture_MONO to-caller-sink:playback_AUX1

channels=$(pw-link -o | grep $mic | grep -E "capture" | wc -l)
# if its stereo
if [ $channels -eq 2 ]; then
    echo "hookup mic01 to physical mic"
    pw-link ${mic}:capture_AUX0 mic01-processed:input_MONO

    echo "hookup mic02 to physical mic"
    pw-link ${mic}:capture_AUX1 mic02-processed:input_MONO
fi

# if its mono
if [ $channels -eq 1 ]; then
    echo "hookup mic01 to physical mic"
    pw-link ${mic}:capture_AUX0 mic01-processed:input_MONO
fi



# set default mic apps
echo "set default mic"
pactl set-default-source mic01-processed

# set default output for apps
echo "set default speaker"
pactl set-default-sink from-desktop

# set physical volumes
echo "set physical speaker volumes"
pactl set-sink-volume $speakers 100%
pactl set-sink-mute $speakers 0

echo "set physical mic volumes"
pactl set-source-volume $mic 100%
pactl set-source-mute $mic 0

# set vitual volumes
echo "set from-desktop volumes"
pactl set-sink-volume from-desktop 95%
pactl set-sink-mute from-desktop 0

echo "set from-caller volumes"
pactl set-sink-volume from-caller 95%
pactl set-sink-mute from-caller 0

echo "set to-caller-sink volumes"
pactl set-sink-volume alsa_output.platform-snd_aloop.0.pro-output-1 100%
pactl set-sink-mute alsa_output.platform-snd_aloop.0.pro-output-1 0

echo "set cspeakers volumes"
pactl set-sink-volume cspeakers 45%
pactl set-sink-mute cspeakers 0

echo "set to-caller volumes"
pactl set-source-volume alsa_input.platform-snd_aloop.0.pro-input-0 100%
pactl set-source-mute alsa_input.platform-snd_aloop.0.pro-input-0 0

echo "set mic01 volumes"
pactl set-source-volume mic01-processed 100%
pactl set-source-mute mic01-processed 0

echo "set mic02 volumes"
pactl set-source-volume mic02-processed 100%
pactl set-source-mute mic02-processed 0

kill -44 $(pidof dwmblocks)
